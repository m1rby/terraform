# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import plugin_pb2 as plugin__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in plugin_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class LogPluginStub(object):
    """Сервис для плагинов обработки логов
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FilterLogs = channel.unary_unary(
                '/logviewer.plugin.LogPlugin/FilterLogs',
                request_serializer=plugin__pb2.FilterRequest.SerializeToString,
                response_deserializer=plugin__pb2.FilterResponse.FromString,
                _registered_method=True)
        self.ProcessLogs = channel.unary_unary(
                '/logviewer.plugin.LogPlugin/ProcessLogs',
                request_serializer=plugin__pb2.ProcessRequest.SerializeToString,
                response_deserializer=plugin__pb2.ProcessResponse.FromString,
                _registered_method=True)
        self.AggregateLogs = channel.unary_unary(
                '/logviewer.plugin.LogPlugin/AggregateLogs',
                request_serializer=plugin__pb2.AggregateRequest.SerializeToString,
                response_deserializer=plugin__pb2.AggregateResponse.FromString,
                _registered_method=True)
        self.GetPluginInfo = channel.unary_unary(
                '/logviewer.plugin.LogPlugin/GetPluginInfo',
                request_serializer=plugin__pb2.PluginInfoRequest.SerializeToString,
                response_deserializer=plugin__pb2.PluginInfo.FromString,
                _registered_method=True)


class LogPluginServicer(object):
    """Сервис для плагинов обработки логов
    """

    def FilterLogs(self, request, context):
        """Фильтрация логов
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessLogs(self, request, context):
        """Обработка/трансформация логов
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AggregateLogs(self, request, context):
        """Агрегация логов (например, группировка ошибок)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPluginInfo(self, request, context):
        """Получение метаданных плагина
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LogPluginServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FilterLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.FilterLogs,
                    request_deserializer=plugin__pb2.FilterRequest.FromString,
                    response_serializer=plugin__pb2.FilterResponse.SerializeToString,
            ),
            'ProcessLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessLogs,
                    request_deserializer=plugin__pb2.ProcessRequest.FromString,
                    response_serializer=plugin__pb2.ProcessResponse.SerializeToString,
            ),
            'AggregateLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.AggregateLogs,
                    request_deserializer=plugin__pb2.AggregateRequest.FromString,
                    response_serializer=plugin__pb2.AggregateResponse.SerializeToString,
            ),
            'GetPluginInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPluginInfo,
                    request_deserializer=plugin__pb2.PluginInfoRequest.FromString,
                    response_serializer=plugin__pb2.PluginInfo.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'logviewer.plugin.LogPlugin', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('logviewer.plugin.LogPlugin', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LogPlugin(object):
    """Сервис для плагинов обработки логов
    """

    @staticmethod
    def FilterLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/logviewer.plugin.LogPlugin/FilterLogs',
            plugin__pb2.FilterRequest.SerializeToString,
            plugin__pb2.FilterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProcessLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/logviewer.plugin.LogPlugin/ProcessLogs',
            plugin__pb2.ProcessRequest.SerializeToString,
            plugin__pb2.ProcessResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AggregateLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/logviewer.plugin.LogPlugin/AggregateLogs',
            plugin__pb2.AggregateRequest.SerializeToString,
            plugin__pb2.AggregateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPluginInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/logviewer.plugin.LogPlugin/GetPluginInfo',
            plugin__pb2.PluginInfoRequest.SerializeToString,
            plugin__pb2.PluginInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
